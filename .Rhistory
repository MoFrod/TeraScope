setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
Which event types dominate task runtimes? - execution time if often the best metric for accessing comuter performance (Hoefler)
What is the interplay between GPU temperature and performance?
What is the interplay between increased power draw and render time?
Can we quantify the variation in computation requirements for particular tiles?
Can we identify particular GPU cards (based on their serial numbers) whose performance differs to other cards? (i.e. perpetually slow cards).
What can we learn about the efficiency of the task scheduling process?
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
View(AC1)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("2018-11-08T", "", AC1$timestamp) %>%
str_replace("Z", "") %>% # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
make_datetime(day, hour, minute)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("2018-11-08T", "", AC1$timestamp) %>%
str_replace("Z", "") %>% # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
make_datetime()
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("2018-11-08T", "", AC1$timestamp) %>%
str_replace("Z", "") %>% # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
make_datetime(hour, minute, second)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("2018-11-08T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("2018-11-08T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
View(AC1)
# Create a data set of application checkpoints for initial investigation grouped by hostname and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname, eventName) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
View(AC1)
# Make timestamp column date/time
AC1$timestamp <- as_datetime(., tz = GMT)
# Make timestamp column date/time
AC1$timestamp <- as_datetime(., tz = "Europe/London")
# Make timestamp column date/time
AC1$timestamp <- as_datetime(AC1$timestamp, tz = "Europe/London")
# Quickplot
ggplot(aes(AC1$timestamp))
# Quickplot
AC1 %>%
ggplot(aes(timestamp))
# Quickplot
AC1 %>%
ggplot(aes(n = timestamp, y = n, fill = eventName)) + geom_step()
# Quickplot
AC1 %>%
ggplot(aes(n = timestamp, y = n, fill = eventName)) + geom_line
# Quickplot
AC1 %>%
ggplot(aes(n = timestamp, y = n, fill = eventName)) + geom_line()
# Quickplot
AC1 %>%
ggplot(aes(x = timestamp, y = n, fill = eventName)) + geom_line()
View(gpu)
# Create a data set of gpu for initial investigation grouped by hostname and arranged by timestamp
GPU1 <- as_tibble(gpu) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
View(GPU1)
# Remove the non-numeric characters from the timestamp column in GPU1
GPU1$timestamp <- gsub("T", "", GPU1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Make timestamp column date/time
GPU1$timestamp <- as_datetime(GPU1$timestamp, tz = "Europe/London")
AC1 %>%
mutate(number = row_number()) %>%
ungroup() %>%
pivot_wider(id_cols = hostname, names_from = number, values_from = c(timestamp, eventName, eventType, jobId, taskId), names_glue = "{.value}_{number}") %>%
mutate(time_between = timestamp_1 - timestamp_2)
AC1 %>%
mutate(number = row_number()) %>%
ungroup() %>%
pivot_wider(id_cols = hostname, names_from = number, values_from = c(timestamp, eventName, eventType, jobId, taskId), names_glue = "{.value}_{number}")
View(application.checkpoints)
View(task.x.y)
# Create a second data set, grouped by task ID
AC2 <- AC1 %>%
group_by(taskId, eventName) %>%
arrange(timestamp, .by_group = TRUE)
View(AC2)
AC2 %>%
mutate(number = row_number()) %>%
ungroup() %>%
pivot_wider(id_cols = hostname, names_from = number, values_from = c(timestamp, eventName, eventType, jobId, taskId), names_glue = "{.value}_{number}")
AC1 %>%
mutate(number = row_number()) %>%
ungroup() %>%
pivot_wider(id_cols = taskId, names_from = number, values_from = c(eventName, eventType, timestamp, hostname, jobId, taskId), names_glue = "{.value}_{number}")
View(application.checkpoints)
View(task.x.y)
# Determine how to combine GPU1 and AC1
all(GPU1$timestamp %>% AC1$timestamp)
# Determine how to combine GPU1 and AC1
all(GPU1$timestamp %in% AC1$timestamp)
all(AC1$timestamp %in% GPU1$timestamp)
# Are there more GPU serials then hosts?
ghosts <- GPU1 %>%
group_by(hostname) %>%
summarise (n_distinct(hostname)) %>%
count() %>%
print() # Hosts must be the GPU node, as we know there are 1024
gserials <- GPU1 %>%
group_by(gpuSerial) %>%
summarise(n_distinct(gpuSerial)) %>%
count() %>%
print()
# Plot GPU temperature, power and ulitisation
gPformance <- GPU1 %>%
ggplot(aes(x = timestamp)) +
geom_line(aes(y = gpuTemC))
View(gPformance)
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) +
geom_line(aes(y = gpuTemC))
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(data = GPU1, aes(x = timestamp)) +
geom_line(aes(y = gpuTemC))
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(data = GPU1, aes(x = timestamp)) +
geom_line(aes(y = gpuTemC))
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(GPU1, aes(x = timestamp)) +
geom_line(aes(y = gpuTemC))
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(GPU1, aes(x = timestamp, y = gpuTemC)) + geom_line()
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(GPU1, aes_(x = timestamp, y = gpuTemC)) + geom_line()
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(GPU1, aes(x = GPU1$timestamp, y = GPU1$gpuTemC)) + geom_line()
ggplot(aes(x = timestamp) + geom_line()
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line()
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line()
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(y = gpuUtilPerc) + geom_line(y = gpuMemUtilPerc) + scale_fill_brewer(palette = "PuOr")
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(y = GPU1$gpuUtilPerc) + geom_line(y = GPU1$gpuMemUtilPerc) + scale_fill_brewer(palette = "PuOr")
# Plot GPU temperature, power and ulitisation
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
#Plot GPU percent utiliation of core
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuUtilPerc))
# Plot GPU percent utilisation of memory
GPU1 %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuMemUtilPerc))
View(application.checkpoints)
View(AC1)
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Make timestamp column date/time
AC1$timestamp <- as_datetime(AC1$timestamp, tz = "Europe/London")
View(AC1)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>% sllide(1:10)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>% slice(1:10)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>% slice(1:10) %>%
print()
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
slice(1:10)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
slice(1:10) %>%
as_tibble()
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- as_tibble(slice(AC1, 1:10))
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= 2018-11-08 07:41:45, timestamp <= 2018-11-08 07:42:11)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= 07:41:45, timestamp <= 07:42:11)
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11")
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11") %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11") %>%
group_by(hostname))
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11") %>%
group_by(hostname)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11") %>%
filter(hostname = "04dc4e9647154250beeee51b866b0715000000")
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:42:11") %>%
filter(hostname == "04dc4e9647154250beeee51b866b0715000000")
View(AC2)
# Select data subset of AC1 for investigation
AC2 <- AC1 %>%
filter(hostname == "04dc4e9647154250beeee51b866b0715000000")
GPU2 <- GPU1 %>%
filter(hostname == "04dc4e9647154250beeee51b866b0715000000")
View(GPU2)
all(GPU2$timestamp %in% AC2$timestamp)
all(AC2$timestamp %in% GPU2$timestamp)
D1 <- full_join(AC2, GPU2, by = "timestamp")
View(D1)
D1 <- full_join(AC2, GPU2, by = "hostname")
View(D1)
D1 <- full_join(AC2, GPU2, by = "hostname", "timestamp")
View(D1)
D1 <- left_join(AC2, GPU2, by = "timestamp")
View(D1)
# Select one virtual machine) for investigation to test how to investigate
AC2 <- AC1 %>%
filter(hostname == "04dc4e9647154250beeee51b866b0715000000") %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:46:28")
GPU2 <- GPU1 %>%
filter(hostname == "04dc4e9647154250beeee51b866b0715000000") %>%
filter(timestamp >= "2018-11-08 07:41:45", timestamp <= "2018-11-08 07:46:28")
write.csv(smaller_subset, “subset.csv”)
write.csv(smaller_subset, "subset.csv")
# Smaller subset of data for investigation
smaller_subset <- AC1 %>% head (1000)
write.csv(smaller_subset, "subset.csv")
# Plot GPU temperature
GPU1 %>% head(500) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot GPU temperature
GPU1 %>% head(200) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% filter(timestamp >= "2018-11-08 07:43:00", timestamp <= "2018-11-08 07:50:00") %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>%
filter(timestamp >= "2018-11-08 07:43:00", timestamp <= "2018-11-08 07:45:00") %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% debt[100:400] %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% debt[100:400, ] %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% subset(debt, 500:1000) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% head(100) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% tail(100) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp)
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(duration = STOP-START) # create a duration column
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
select(-X1) %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(duration = STOP-START) # create a duration column
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
as.numeric(AC2$START) %>%
as.numeric(AC2$STOP) %>%
mutate(duration = STOP-START) # create a duration column
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
as.numeric(AC2$START) %>%
as.numeric(AC2$STOP)
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columsn with the timestamp value
View(AC2)
AC2$START <- as_datetime(AC2$START, tz = "Europe/London")
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Make timestamp column date/time
AC1$timestamp <- as_datetime(AC1$timestamp, tz = "Europe/London")
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columsn with the timestamp value
View(AC2)
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2500) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2200) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2100) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2050) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp, y = gpuTempC, y = gpuUtilPerc, gpuMemUtilPerc)) + geom_line(aes(color = variable, linetype = variable))+ scale_fill_brewer(palette = "PuOr")
library(RColorBrewer)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(START = as_datetime(START), STOP = as_datetime(STOP))
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(START = as_datetime(START), STOP = as_datetime(STOP))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(START = as_datetime(START), STOP = as_datetime(STOP))
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed year, date and alphabetic characters as they're all the same across all 660400 rows.
# Make timestamp column date/time
AC1$timestamp <- as_datetime(AC1$timestamp, tz = "Europe/London")
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columsn with the timestamp value
View(AC2)
mutate(START = parse_date_time(START), STOP = parse_date_time(STOP))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
mutate(START = parse_date_time(START), STOP = parse_date_time(STOP))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columsn with the timestamp value
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(aes(y = gpuUtilPerc)) + geom_line(aes(y = gpuMemUtilPerc)) + scale_fill_brewer(palette = "PuOr")
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(aes(y = gpuUtilPerc)) + geom_line(aes(y = gpuMemUtilPerc)) + scale_fill_brewer(palette = "Paired")
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(aes(y = gpuUtilPerc)) + geom_line(aes(y = gpuMemUtilPerc)) + scale_colour_brewer(palette = "Paired")
RColorBrewer::display.brewer.pal
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), color=supp) + geom_line(aes(y = gpuUtilPerc), color=supp) + geom_line(aes(y = gpuMemUtilPerc), color=supp) + scale_color_brewer(palette = "Paired")
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "blue") + geom_line(aes(y = gpuUtilPerc), colour = "orange") + geom_line(aes(y = gpuMemUtilPerc))
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "steelblue") + geom_line(aes(y = gpuUtilPerc), colour = "orange") + geom_line(aes(y = gpuMemUtilPerc), colour = "grey")
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "lightblue") + geom_line(aes(y = gpuUtilPerc), colour = "orange") + geom_line(aes(y = gpuMemUtilPerc), colour = "grey")
# Plot sameset of GPU temperature
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "black") + geom_line(aes(y = gpuUtilPerc), colour = "red") + geom_line(aes(y = gpuMemUtilPerc), colour = "blue")
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
parse_date_time(a, orders = c("ymd HMS"))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
parse_date_time(START, orders = c("ymd HMS"))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
parse_date_time(AC2$START, orders = c("ymd HMS"))
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) %>% # Fill those columsn with the timestamp value
parse_date_time(AC2$START, orders = c("ymd HMS"), tz = "Europe/London")
View(AC2)
AC2$START <- parse_date_time(., orders = c("ymd HMS"), tz = "Europe/London")
AC2$START <- parse_date_time(START, orders = c("ymd HMS"), tz = "Europe/London")
AC2$START <- parse_date_time(AC2$START, orders = c("ymd HMS"), tz = "Europe/London")
View(AC2)
# Move START and STOP to be columns per row to create a ‘duration’ variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columsn with the timestamp value
# Smaller subset of data for investigation
AC3 <- AC2 %>% head (1000) %>%
write.csv(AC3, "subset2.csv") #Copy for Matt support
# Smaller subset of data for investigation
AC3 <- AC2 %>% head (1000) %>%
write.csv(AC3, "subset2.csv") #Copy for Matt support
# Smaller subset of data for investigation
AC3 <- AC2 %>% head (1000)
write.csv(AC3, "subset2.csv") #Copy for Matt support
# Smaller subset of data for investigation
sub-set <- AC2 %>% head (1000)
# Smaller subset of data for investigation
smaller_subset2 <- AC2 %>% head (1000)
write.csv(smaller_subset2, "subset2.csv") #Copy for Matt support
# Smaller subset of data for investigation
smaller_subset2 <- AC2 %>% head(1000)
View(smaller_subset2)
write.csv(smaller_subset2, "subset2.csv") #Copy for Matt support
# Smaller subset of data for investigation
smaller_subset2 <- AC2 %>% head(1000) %>%
write.csv("subset2.csv") #Copy for Matt support
library(readr)
subset <- read_csv("subset.csv")
View(subset)
# Smaller subset of data for investigation
df <- AC1 %>% head (1000) %>%
write.csv(df, "df.csv") #Copy for Matt support
# Smaller subset of data for investigation
df <- AC1 %>% head (1000) %>%
write.csv(df, "df.csv") #Copy for Matt support
