setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC")
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# How many unique hostnames are there?
hosts <- AC1 %>%
group_by(hostname) %>%
summarise (n_distinct(hostname)) %>%
count()
# How many GPU serials are there?
gserials <- GPU1 %>%
group_by(gpuSerial) %>%
summarise(n_distinct(gpuSerial)) %>%
count()
# How many times does TotalRender happen per host?
TRh <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = FALSE)
# How many taskIds are there?
ID <- AC1 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print() # This is the same in both application.checkpoints and task.x.y
# How many jobIds are there?
j <- AC1 %>%
group_by(jobId) %>%
summarise(n_distinct(jobId)) %>%
count() %>%
print() # This is the same in both application.checkpoints and task.x.y, and corresponds to the levels 4, 8 and 12
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = Inf)
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
print(., n = 5, width = Inf)
# Create a single data set with power usage and duration for every event other than total render
BEGIN <- as_datetime("2018-11-0807:41:27.242", tz = "Europe/London")
END <- as_datetime("2018-11-0807:42:27.242", tz = "Europe/London")
AC9 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration2 <- full_join(AC9, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#33a02c") + labs(x = "Name of Event", y = "Power Draw", title = "Boxplot of Power Draw by Name of Event without TotalRender") + theme(legend.position = "none")
# SAVE AND LABEL # Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# Plot hostname by power draw and duration of uploading
Power_Duration2 %>%
filter(eventName == "Uploading") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw", title = "Uploading: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw", title = "TotalRender: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# What is the mean, standard deviation and coefficient of variation for Total Render duration?
AC7 <- AC2 %>%
filter(eventName == "TotalRender") # Filter to create a new data set only with TotalRender
TR1 <- AC7 %>%
group_by(hostname) %>% # Group by the virtual machine host name
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100) # New column with coefficient of variation
# What is the mean, standard deviation and coefficient of variation for GPU power draw?
Power <- GPU1 %>%
group_by(hostname) %>% # Group by hostname
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt)) %>% # Calculate mean and standard deviation of power for each host.
mutate(CoV_p = (sd_power/av_power)*100) # New column with coefficient of variation
# Create single data set to compare execution time and power draw.
Power_Duration <- left_join(TR1, Power, by = "hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw", title = "Average Power Draw by Average Duration for Hostname") + scale_fill_brewer(palette = "Paired")
# What is the mean, standard deviation and coefficient of variation for all GPU metrics by host
Performance <- GPU1 %>%
group_by(hostname) %>%
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt), av_temp = mean(gpuTempC), sd_temp = sd(gpuTempC), av_util = mean(gpuUtilPerc), sd_util = sd(gpuUtilPerc), av_mem = mean(gpuMemUtilPerc), sd_mem = sd(gpuMemUtilPerc)) %>% # Calculate mean and standard deviation of power for each host.
mutate(CoV_p = (sd_power/av_power)*100, CoV_t = (sd_temp/av_temp)*100, CoV_u = (sd_util/av_util)*100, CoV_m = (sd_mem/av_mem)*100) # New column with coefficient of variation
# SAVE AND LABL # Quickplot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Temperature seems to increase as you use more power
# Quickplot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power usage generally increases as more of the gpu core is used - start to see divide into two groups
# SAVE AND LABEL # Quickplot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
# Quickplot mem by temp
Performance %>%
ggplot(aes(x = av_mem, y = av_temp)) + geom_point(position = "jitter") + geom_smooth() # Temperature is slightly lower the more memory is used (more nodes condensed lower, with a wider range) - two groups are clear
# SAVE AND LABEL # Quickplot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util)) + geom_point(position = "jitter") + geom_smooth() # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Quickplot util by temp
Performance %>%
ggplot(aes(x = av_util, y = av_temp)) + geom_point(position = "jitter") + geom_smooth() # Temperature seems broadly consisten across gpu core utilisation
# SAVE AND LABL # Quickplot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Temperature seems to increase as you use more power
View(AC2)
View(GPU1)
View(Performance)
# Quickplot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power usage generally increases as more of the gpu core is used - start to see divide into two groups
# SAVE AND LABEL # Quickplot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
# Quickplot mem by temp
Performance %>%
ggplot(aes(x = av_mem, y = av_temp)) + geom_point(position = "jitter") + geom_smooth() # Temperature is slightly lower the more memory is used (more nodes condensed lower, with a wider range) - two groups are clear
# SAVE AND LABEL # Quickplot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util)) + geom_point(position = "jitter") + geom_smooth() # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 %>%
ggplot(aes(x = x, y = y, fill = duration)) + geom_tile() # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satelites.
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = y, fill = duration)) + geom_tile() # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satelites.
# Quickplot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power usage generally increases as more of the gpu core is used - start to see divide into two groups
# SAVE AND LABEL # Quickplot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util)) + geom_point(position = "jitter") + geom_smooth() # Very clear trajectory of more memory corresponds to utilising  more gpu core
# SAVE AND LABL # Quickplot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Temperature seems to increase as you use more power
View(T1)
# SAVE AND LABL # Quickplot power by temperature
Total1 %>%
ggplot(aes(x = duration, y = gpuUtilPerc)) + geom_point(position = "jitter") + geom_smooth()
# Join together XY1 and Power_Duration1 by taskId
Total1 <- left_join(XY1, Power_Duration1, by = "taskId")
# SAVE AND LABL # Quickplot power by temperature
Total1 %>%
ggplot(aes(x = duration, y = gpuUtilPerc)) + geom_point(position = "jitter") + geom_smooth()
View(Power_Duration2)
# Join together XY1 and Power_Duration1 by taskId
Total1 <- left_join(XY1, Power_Duration2, by = "taskId")
# SAVE AND LABL # Quickplot power by temperature
Total1 %>%
ggplot(aes(x = duration, y = gpuUtilPerc)) + geom_point(position = "jitter") + geom_smooth()
View(Total1)
View(Power_Duration)
View(T1)
View(TR2)
View(GPU2)
# Join TR1 with Performance
TR_P <- left_join(TR1, Performance, by = "hostname")
View(TR_P)
# Select to x of TR_P and match it to the hosts in GPU1
s_GPU <- TR_P %>%
arrange(desc(av_duration)) %>%
head(50)
s_GPU1 <- left_join(s_GPU, GPU1, by = "hostname")
View(s_GPU1)
# How many tasks in XY1?
cT1 <- XY1 %>%
group_by(taskId) %>% # Group by taskID
summarise(n_distinct(taskId)) %>% # Summarise number of distinct taskID
count() %>%
print() # Same as AC2
# How many gpu serials are there?
gpuS <- GPU1 %>%
group_by(gpuSerial) %>% # Group by gpuSerial
summarise(n_distinct(gpuSerial)) %>% # Summarise number of distinct gpuSerial
count() %>%
print()
s_GPU <- left_join(TR_P, GPU1, by = "hostname")
View(s_GPU)
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname") + scale_fill_brewer(palette = "Paired")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname") + scale_fill_brewer(palette = "Paired")
View(Power_Duration)
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname") + scale_fill_brewer(palette = "Paired")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname") + scale_fill_brewer(palette = "Paired")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#1f78b4") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#b2df8a") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#1f78b4") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#a6cee3") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# How many unique hostnames are there?
hosts1 <- s_GPU %>%
group_by(hostname) %>% # Group by hostname
summarise (n_distinct(hostname)) %>% # Summarise number of distinct hostnames
count() %>%
print()
# Group s_GPU by hostname
s_GPU <- s_GPU %>%
group_by(hostname)
# Quickplot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power usage generally increases as more of the gpu core is used - start to see divide into two groups
View(Performance)
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Temperature for Hostname")  # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Temperature for Hostname")  # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#636363") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Temperature for Hostname")  # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Temperature for Hostname")  # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#525252") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Duration for Hostname")
# Plot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth() # Power usage generally increases as more of the gpu core is used - start to see divide into two groups
# Plot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Utilisation (percentage)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Core Utilisation for Hostname")
# Plot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power, color = CoV_u)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Utilisation (percentage)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Core Utilisation for Hostname")
# Plot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Memory Usage for Hostname")# Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
# Plot mem by temp
Performance %>%
ggplot(aes(x = av_mem, y = av_temp)) + geom_point(position = "jitter") + geom_smooth() # Temperature is slightly lower the more memory is used (more nodes condensed lower, with a wider range) - two groups are clear
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util)) + geom_point(position = "jitter") + geom_smooth() # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot util by temp
Performance %>%
ggplot(aes(x = av_util, y = av_temp)) + geom_point(position = "jitter") + geom_smooth() # Temperature seems broadly consisten across gpu core utilisation
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage for Hostname") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_p)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage for Hostname") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage for Hostname") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_u)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage for Hostname") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage for Hostname") # Very clear trajectory of more memory corresponds to utilising  more gpu core
TR2 %>%
ggplot(aes(x = x, y = y, fill = duration)) + geom_tile() # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satelites.
View(s_GPU)
# Select the perpetually slow gpus
s_GPU1 <- s_GPU %>%
arrange(desc(av_duration), .by_group = TRUE) %>%
head(100)
View(s_GPU1)
View(Performance)
View(Power_Duration2)
View(Power_Duration)
# Have one row per unique hostname
s_GPU1 <- distinct(s_GPU, hostname, .keep_all = TRUE)
View(s_GPU1)
install.packages("shiny")
