Power_Duration <- left_join(TR1, Power, by = "hostname")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter", color = "#33a02c") + geom_smooth(color = "#525252") + labs(x = "Average Duration (seconds)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Duration") + expand_limits(y = 80)
# What is the mean, standard deviation and coefficient of variation for all GPU metrics by host
Performance <- GPU1 %>%
group_by(hostname) %>% # Group by hostname
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt), av_temp = mean(gpuTempC), sd_temp = sd(gpuTempC), av_util = mean(gpuUtilPerc), sd_util = sd(gpuUtilPerc), av_mem = mean(gpuMemUtilPerc), sd_mem = sd(gpuMemUtilPerc)) %>% # Calculate mean and standard deviation of power for each host.
mutate(CoV_p = (sd_power/av_power)*100, CoV_t = (sd_temp/av_temp)*100, CoV_u = (sd_util/av_util)*100, CoV_m = (sd_mem/av_mem)*100) # New column with coefficient of variation
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by util
Performance %>%
ggplot(aes(x = av_util, y = av_power, color = CoV_u)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Utilisation (percentage)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Core Utilisation", color = "Utilisation Coefficent of Variation")
# Plot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Memory Usage") # Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Hostname: Average Utilisation by Average Memory Usage") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = y, fill = duration)) + geom_tile() # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satelites.
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
group_by(gpuSerial) %>%
mutate(av_gpu_t = mean(duration))
S_gpu <- Power_Duration3 %>%
filter(av_gpu_t >= 34) %>%
arrange(desc(av_gpu_t)) %>%
head(10)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_gpu_t = median(duration), av_gpu_t = mean(duration))
View(Power_Duration3)
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
filter(med_gpu_t >= 34) %>%
arrange(desc(med_gpu_t)) %>%
head(10)
View(S_gpu)
n_distinct(s_gpu,hostname)
n_distinct(S_gpu,hostname)
A_gpu1 <- S_gpu %>%
n_distinct(gpuSerial)
A_gpu1 <- S_gpu %>%
n_distinct()
install.packages("kableExtra")
library(kableExtra)
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(., 2, 3, 4, 5, 6) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2, 3) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
remove_column(3) %>%
remove_column(4) %>%
remove_column(5) %>%
remove_column(6) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
remove_column(3) %>%
remove_column(4) %>%
remove_column(5) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
remove_column(2) %>%
kable_material(c("stripped", "hover"), width = F)
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover"))
# Cache AC1
cache("AC1")
# Cache AC2
cache("AC2")
# Cache GPU1
cache("GPU1")
# Cache XY1
cache("XY1")
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(format = "latex", caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(format = "latex", booktabs = T, caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'")
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover")) %>%
print()
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover"))
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_long %>%
select(hostname, duration) %>%
kbl(caption = "Hostname of virtual machines with the longest run time (duration) for the event 'Render'") %>%
kable_material(c("stripped", "hover"))
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + scale_colour_discrete(str_wrap(width = 5))
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter", legend.position = "bottom") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired")
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom")
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 2, byrow = TRUE))
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(fill = guide_legend(nrow = 2))
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom", legend.box = "virtical", legend.margin = margin())
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom", legend.box = "virtical")
# Plot hostname by power draw and duration of tiling
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Tiling: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 2))
# Plot hostname by power draw and duration of uploading
Power_Duration2 %>%
filter(eventName == "Uploading") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "Uploading: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 2))
# Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "TotalRender: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3))
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom" + guides(color = guide_legend(nrow = 32))) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 32)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 2)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom", title.postition = "top") + guides(color = guide_legend(nrow = 3)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom", title.position = "top") + guides(color = guide_legend(nrow = 3)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") + guides(title.position = "top", color = guide_legend(nrow = 3)) # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") + guides(title.position = "top") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + guide_legend(title.position = "top") + + theme(legend.position = "bottom") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + guide_legend(title.position = "top") + theme(legend.position = "bottom") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Coefficient of Variation") + theme(legend.position = "bottom") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by temperature
Performance %>%
ggplot(aes(x = av_temp, y = av_power, color = CoV_t)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Temperature (celcius)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Temperature", color = "Temperature Variation") # Temperature is loosely correlated to power; temperature seems to increase as you use more power
# Plot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Power Draw (watts)", title = "Hostname: Average Power Draw by Average Memory Usage", color = "Memory Variation") # Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Hostname: Average Utilisation by Average Memory Usage", color = "Memory Variation") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = -y, fill = duration)) + geom_tile() + labs(x = "X", y = "-Y", title = "Heatmap Visualisation of Run Time (duration)", color = "Seconds")# Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satelites.
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = -y, fill = duration)) + geom_tile() + labs(x = "X", y = "-Y", title = "Heatmap Visualisation of Run Time (duration)", color = "Seconds")# Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satellites.
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = -y, fill = duration)) + geom_tile() + labs(x = "X", y = "-Y", title = "Heatmap Visualisation of Run Time (duration)", fill = "Seconds")# Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satellites.
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = -y, fill = duration)) + geom_tile() + labs(x = "X", y = "-Y", title = "Heatmap Visualisation of Run Time (duration)", fill = "Seconds") + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satellites.
View(TR2)
# Create a heatmap co-ordinates from XY1 with colour as Total Render time
T1 <- AC7[, c("taskId", "duration")] # Create new tibble with taskId and duration time
TR2 <- left_join(T1, XY1, by = "taskId") # Join together T1 and XY1
TR2 %>%
ggplot(aes(x = x, y = -y, fill = duration)) + geom_tile() + labs(x = "X", y = "-Y", title = "Heatmap Visualisation of Task Duration", fill = "Seconds") + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) # Surfaces with intense texture take more time to render, for example stadium seats and roofs with different surfaces such as satellites.
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_gpu_t = median(duration), av_gpu_t = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
filter(med_gpu_t >= 34) %>%
arrange(desc(med_gpu_t)) %>%
head(10)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_gpu_t = median(duration), av_gpu_t = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
filter(med_gpu_t >= 34) %>%
arrange(desc(med_gpu_t)) %>%
head(10)
S_gpu %>%
select(hostname, gpuSerial, med_gpu_t) %>%
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover"))
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
filter(med_time >= 34) %>%
arrange(desc(med_time)) %>%
head(10)
S_gpu %>%
select(hostname, gpuSerial, med_time) %>%
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover"))
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(gpuSerial) %>% # Make sure there is one value per gpu serial
arrange(desc(med_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(gpuSerial) %>% # Make sure there is one value per gpu serial
arrange(desc(med_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(gpuSerial) %>% # Make sure there is one value per gpu serial
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostname
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
distinct(gpuSerial) %>% # Make sure there is one value per gpu serial
head(10) # Select the top 10 (slowest)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostname
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
distinct(gpuSerial) %>% # Make sure there is one value per gpu serial
head(10) # Select the top 10 (slowest)
S_gpu %>%
select(hostname, gpuSerial, med_time) %>% # Select columns
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover")) %>%
kable_styling(latex_options = "HOLD_position")
View(S_gpu)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostname
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
filter(distinct(gpuSerial) == TRUE) %>% # Make sure there is one value per gpu serial
head(10) # Select the top 10 (slowest)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(Power_Duration3, gpuSerial, .keep_all = TRUE) %>% # Make sure there is one value per gpu serial
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(., gpuSerial, .keep_all = TRUE) %>% # Make sure there is one value per gpu serial
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
S_gpu %>%
select(hostname, gpuSerial, med_time) %>% # Select columns
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover")) %>%
kable_styling(latex_options = "HOLD_position")
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(m_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(., gpuSerial, .keep_all = TRUE) %>% # Make sure there is one value per gpu serial
arrange(desc(m_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
S_gpu %>%
select(hostname, gpuSerial, m_time) %>% # Select columns
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover")) %>%
kable_styling(latex_options = "HOLD_position")
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_time = median(duration), av_time = mean(duration)) # Median and average look very close
# Filter out gpu cards that have the longest duration
Power_Duration3 <- Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
group_by(gpuSerial) %>%
mutate(med_time = median(duration), av_time = mean(duration)) # Median and average look very close
S_gpu <- Power_Duration3 %>% # Create two groups to match the split between hostnames
distinct(., gpuSerial, .keep_all = TRUE) %>% # Make sure there is one value per gpu serial
arrange(desc(med_time)) %>% # Arrange median by descending so that the slowest are at the top
head(10) # Select the top 10 (slowest)
S_gpu %>%
select(hostname, gpuSerial, med_time) %>% # Select columns
kbl(caption = "The hostnames and GPU serials of the 10 slowest virtual machines") %>%
kable_material(c("stripped", "hover")) %>%
kable_styling(latex_options = "HOLD_position")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration of Event (seconds)", title = "Boxplot of Duration of Event by Name of Event") + theme(legend.position = "none") + expand_limits(y = 0)
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#33a02c") + labs(x = "Name of Event", y = "Power Draw of Event (watts)", title = "Boxplot of Power Draw of Event by Name of Event") + theme(legend.position = "none") + expand_limits(y = 0)
# Plot power by mem
Performance %>%
ggplot(aes(x = av_mem, y = av_power, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Power Draw (watts)", title = "Average Power Draw by Average Memory Usage per Hostname", color = "Memory Variation") # Power use generally increases as more gpu memory is used - you see a clear divide into two groups here.
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw (watts)", title = "TotalRender: Power Draw by Duration", color = "Job ID") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3))
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Utilisation (percentage)", title = "Average Utilisation by Average Memory Usage per Hostname", color = "Memory Variation") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Rendering Duration (seconds)", y = "Power Consumption (watts)", title = "Creating a Terapixel: Power Draw by Duration", color = "Visualisation Level") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3))
# Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Rendering Duration (seconds)", y = "Power Consumption (watts)", title = "Creating a Terapixel: Powerby Duration", color = "Visualisation Level") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3))
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Core Utilisation (percentage)", title = "Creating a Terapixel: GPU Core Utilisation by GPU Memory Demand for Every Virtual Machine", color = "Memory Variation") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Core Utilisation (percentage)", title = "GPU Core Utilisation by GPU Memory Demand for Each Virtual Machine", color = "Memory Variation") # Very clear trajectory of more memory corresponds to utilising  more gpu core
# Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Rendering Duration (seconds)", y = "Power Consumption (watts)", title = "Power Consumption by Duration Taken to Render a Terapixel", color = "Visualisation Level") + scale_color_brewer(palette = "Paired") + theme(legend.position = "bottom") + guides(color = guide_legend(nrow = 3))
# Plot mem by util
Performance %>%
ggplot(aes(x = av_mem, y = av_util, color = CoV_m)) + geom_point(position = "jitter") + geom_smooth(color = "#525252") + labs(x = "Average Memory (percentage)", y = "Average Core Utilisation (percentage)", title = "Virtual Machine GPU Core Utilisation by GPU Memory Demand", color = "Memory Variation") # Very clear trajectory of more memory corresponds to utilising  more gpu core
