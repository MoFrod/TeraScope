setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# How many unique hosts are there?
hosts <- AC1 %>%
group_by(hostname) %>%
summarise (n_distinct(hostname)) %>%
count() %>%
print()
# How many GPU serials are there?
gserials <- GPU1 %>%
group_by(gpuSerial) %>%
summarise(n_distinct(gpuSerial)) %>%
count() %>%
print()
# How many times does is a visualisation totally rendered?
TR <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
print()
# How many taskIds are there?
ID <- AC1 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print() # This is the same in both application.checkpoints and task.x.y
# How many jobIds are there?
j <- AC1 %>%
group_by(jobId) %>%
summarise(n_distinct(jobId)) %>%
count() %>%
print() # This is the same in both application.checkpoints and task.x.y, and corresponds to the levels 4, 8 and 12
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = Inf)
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot()
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# LABEL AND SAVE # Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot()
# Create a single data set with power usage and duration for every event other than total render
BEGIN <- as_datetime("2018-11-0807:41:27.242", tz = "Europe/London")
END <- as_datetime("2018-11-0807:42:27.242", tz = "Europe/London")
AC9 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName != "TotalRender") %>% # Filter out TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration2 <- full_join(AC9, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# LABEL AND SAVE #Quickplot event name by power draw (SAVE)
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot()
# Create a single data set with power usage and duration for total render
AC8 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName == "TotalRender") %>% # Filter TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
Power_Duration1 <- full_join(AC8, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration1 %>%
ggplot(aes(x = duration, y = powerDrawWatt)) + geom_point(position = "jitter")
# Join together Power Duration 1 and XY1
Total <-  left_join(Power_Duration1, XY1, by = "taskId")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render with difference shapes for taskId
Total %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId.x)) + geom_point(position = "jitter")
# What is the mean, standard deviation and coefficient of variation for Total Render duration?
AC7 <- AC2 %>%
filter(eventName == "TotalRender") # Filter to create a new data set only with TotalRender
TR1 <- AC7 %>%
group_by(hostname) %>% # Group by the virtual machine host name
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100) # New column with coefficient of variation
# What is the mean, standard deviation and coefficient of variation for GPU power draw?
Power <- GPU1 %>%
group_by(hostname) %>%
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt)) %>% # Calculate mean and standard deviation of power for each host.
mutate(CoV_p = (sd_power/av_power)*100) # New column with coefficient of variation
# Create single data set to compare execution time and power draw.
Power_Duration <- left_join(TR1, Power, by = "hostname")
# SAVE AND LABEL # Quick plot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth()
# How many times does rendering happen per host?
TRh <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = TRUE) # Some hosts render more than others. Is this because of performance or tasking?
View(TR)
# How many times does is a visualisation totally rendered?
TR <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
arrange(desc()) %>%
print()
View(TRh)
# How many times does TotalRender happen?
R <- AC2 %>%
filter(eventName == "TotalRender") %>%
count() %>%
print() # Rendering happens 132080 times
a <- 132080/2
View(XY1)
View(R)
# How many times does TotalRender happen per host?
TRh <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = FALSE)
View(TRh)
View(AC1)
View(AC2)
3. It appears that some virtual machines complete more 'TotalRender' than others, suggesting that some are more productive.
```{R taskId, echo = FALSE}
# How many taskIds are there?
ID <- AC1 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print() # This is the same in both application.checkpoints and task.x.y
```
View(task.x.y)
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = [1,2,7])
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = 1:2:7)
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = 1,2,7)
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, width = col_number(1, 2, 7))
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, col_number(1, 2, 7))
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, c = 1, 2, 7)
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6, c(1, 2, 7))
# Display AC2 with START, STOP and duration as columns
print(AC2, n = 6)
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot() + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + scale_fill_brewer(palette = "Blues")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3) + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + scale_fill_brewer(palette = "Blues")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3) + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + scale_fill_brewer(palette = "Dark2")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3) + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none") + scale_fill_brewer(palette = "Dark2")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#b2df8a") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#a6cee3") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# Plot duration of eventName
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# DO MORE INITIAL INVESTIGATION ON GPU AND TASK DATA
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
# DO MORE INITIAL INVESTIGATION ON GPU AND TASK DATA
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event") + theme(legend.position = "none")
# How many times does TotalRender happen?
R <- AC1 %>%
filter(eventName == "TotalRender") %>%  # Filter for TotalRender in the eventName
count() %>%
print() # Rendering happens 132080 times
# How many times does TotalRender happen?
R <- AC1 %>%
filter(eventName == "TotalRender", by_group = FALSE) %>%  # Filter for TotalRender in the eventName
count() %>%
print() # Rendering happens 132080 times
# How many times does TotalRender happen?
R <- AC1 %>%
filter(eventName == "TotalRender") %>%  # Filter for TotalRender in the eventName
count() %>%
print()
# Plot duration of eventName activities as boxplot
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot() #Further investigation in EDA1
# Plot duration of eventName activities without uploading to see saving config and tiling execution times better
ggplot(AC5, aes(x = eventName, y = duration)) + geom_boxplot()
# Remove Render from results
AC4 <- AC3 %>%
filter(eventName != "Render") # Filter out Render from eventName
# Remove Uploading from results
AC5 <- AC4 %>%
filter(eventName != "Uploading") # FIlter out uploading from eventName
# Plot duration of eventName activities without uploading to see saving config and tiling execution times better
ggplot(AC5, aes(x = eventName, y = duration)) + geom_boxplot()
# Which hosts have the longest Render time?
AC6 <- AC3 %>%
filter(eventName == "Render") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
R_long <- head(AC6, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
R_short <- tail(AC6, 50) %>%
group_by(hostname) # Isolate the 50 shortest durations
# Which hosts have the longest TotalRender time?
AC7 <- AC2 %>%
filter(eventName == "TotalRender") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
TR1 <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100) # New column with coefficient of variation
# Exploration into the longest and shortest durations
TR_long <- head(AC7, 50) %>%
group_by(hostname) # Isolate the 50 longest durations
TR_short <- tail(AC7, 50) %>%
group_by(hostname) # Isolate the 50 shortest durations
View(R_short)
View(R_long)
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
print(., n = 5, width = Inf)
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
print(, n = 5, width = Inf)
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
print(., n = 5, width = Inf)
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
print()
R_long <- head(AC6, 50) %>%
group_by(hostname) %>% # Isolate the 50 longest durations
as_tibble() %>%
print(R_long, n = 5)
View(R_long)
View(gpu)
AC9 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration2 <- full_join(AC9, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# Plot event name by power draw (SAVE)
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot()
AC9 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName != "TotalRender") %>% # Filter out TotalRender initially to see power draw of events within total render.
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration2 <- full_join(AC9, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# Plot event name by power draw (SAVE)
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot()
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#a6cee3") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#33a02c") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none")
View(gpu)
END <- as_datetime("2018-11-0807:42:27.242", tz = "Europe/London")
AC9 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration2 <- full_join(AC9, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# Plot event name by power draw
ggplot(Power_Duration2, aes(x = eventName, y = powerDrawWatt)) + geom_boxplot(alpha = 0.3, color = "#33a02c") + labs(x = "Name of Event", y = "Power Draw", title = "Boxplot of Power Draw by Name of Event without TotalRender") + theme(legend.position = "none")
# Create a single data set with power usage and duration for total render
AC10 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName == "TotalRender") %>% # Filter TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
Power_Duration4 <- full_join(AC8, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# Create a single data set with power usage and duration for total render
AC10 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName == "Tiling") %>% # Filter TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
Power_Duration4 <- full_join(AC8, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration4 %>%
ggplot(aes(x = duration, y = powerDrawWatt)) + geom_point(position = "jitter")
View(AC10)
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration4 %>%
ggplot(aes(x = duration, y = powerDrawWatt)) + geom_point(position = "jitter")
# Create a single data set with power usage and duration for total render
AC10 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName == "Tiling") %>% # Filter TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
Power_Duration4 <- full_join(AC10, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration4 %>%
ggplot(aes(x = duration, y = powerDrawWatt)) + geom_point(position = "jitter")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration4 %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId.x)) + geom_point(position = "jitter")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration4 %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter")
View(Power_Duration2)
View(Power_Duration4)
View(Power_Duration1)
View(Power_Duration2)
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName = "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Uploading") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + lab(x = "Duraton", y = "Power Draw", title = "Tiling: Power Draw by Duration") + + theme(legend.position = "bottom")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton", y = "Power Draw", title = "Tiling: Power Draw by Duration") + + theme(legend.position = "bottom")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom")
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot(alpha = 0.3, color = "#1f78b4") + labs(x = "Name of Event", y = "Duration (seconds)", title = "Boxplot of Duration by Name of Event without TotalRender") + theme(legend.position = "none") + scale_fill_brewer(palette = "PurOr")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Uploading") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + scale_fill_brewer(palette = "PurOr")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_fill_brewer(palette = "PuOr")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "PuOr")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "PiYG")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "PrGn")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Tiling") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duraton (seconds)", y = "Power Draw", title = "Tiling: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "Uploading") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw", title = "Uploading: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render
Power_Duration2 %>%
filter(eventName == "TotalRender") %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId)) + geom_point(position = "jitter") + labs(x = "Duration (seconds)", y = "Power Draw", title = "TotalRender: Power Draw by Duration") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# Join together Power Duration 1 and XY1
Total <-  left_join(Power_Duration1, XY1, by = "taskId")
# SAVE AND LABEL # Plot hostname by power draw and duration of total render with difference shapes for taskId
Total %>%
ggplot(aes(x = duration, y = powerDrawWatt, color = jobId.x)) + geom_point(position = "jitter")
View(Power_Duration)
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw", title = "Average Power Draw by Average Duration for Hostname") + theme(legend.position = "bottom") + scale_color_brewer(palette = "Paired")
# Plot average power draw by average duration for each hostname
Power_Duration %>%
ggplot(aes(x = av_duration, y = av_power)) + geom_point(position = "jitter") + geom_smooth() + labs(x = "Average Duration (seconds)", y = "Average Power Draw", title = "Average Power Draw by Average Duration for Hostname") + theme(legend.position = "bottom") + scale_fill_brewer(palette = "Paired")
