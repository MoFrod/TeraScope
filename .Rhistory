setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(tg, aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = supp) + geom_line(aes(y = gpuUtilPerc), colour = supp) + geom_line(aes(y = gpuMemUtilPerc), colour = supp) + scale_colour_brewer(palette = "Set1")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = supp) + geom_line(aes(y = gpuUtilPerc), colour = supp) + geom_line(aes(y = gpuMemUtilPerc), colour = supp) + scale_colour_brewer(palette = "Set1")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC)) + geom_line(aes(y = gpuUtilPerc)) + geom_line(aes(y = gpuMemUtilPerc)) + scale_colour_brewer(palette = "Paired")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = gpuTempC) + geom_line(aes(y = gpuUtilPerc), colour = gpuUtilPerc) + geom_line(aes(y = gpuMemUtilPerc), gpuMemUtil) + scale_colour_brewer(palette = "Paired")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = AC1$gpuTempC) + geom_line(aes(y = gpuUtilPerc), colour = AC1$gpuUtilPerc) + geom_line(aes(y = gpuMemUtilPerc), colour = AC1$gpuMemUtil) + scale_colour_brewer(palette = "Paired")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "#b2df8a") + geom_line(aes(y = gpuUtilPerc), colour = "#1f78b4", size = 2) + geom_line(aes(y = gpuMemUtilPerc), colour = "#a6cee3", size = 2) + scale_colour_brewer(palette = "Paired")
# Plot sameset of GPU temperature, memory and core utilisation.
GPU1 %>% slice(2000:2010) %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = gpuTempC), colour = "#b2df8a", size = 2) + geom_line(aes(y = gpuUtilPerc), colour = "#1f78b4", size = 2) + geom_line(aes(y = gpuMemUtilPerc), colour = "#a6cee3", size = 2) + scale_colour_brewer(palette = "Paired")
mutate(START = parse_date_time(START, orders = c("ymd HMS"))
AC1 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS")))
# Move START and STOP to be columns per row to create a 'duration' variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columns with the timestamp value
AC1 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS")))
View(AC2)
AC1 %>%
mutate(parse_date_time(START, orders = c("ymd HMS")))
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS")))
View(AC2)
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS"))) %>%
write.csv()
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS"))) %>%
write.csv(., "START.csv")
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS"))) %>%
write.csv(AC2, "START.csv")
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS"))) %>%
write.csv(AC2, "START.csv")
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS"))) %>%
write.csv(AC2, "AC2.csv")
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed alphabetic characters as they're all the same across all 660400 rows
# Move START and STOP to be columns per row to create a 'duration' variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columns with the timestamp value
View(AC2)
# Make START/STOP columns date/time
AC2$START <- as_datetime(AC2$START, tz = "Europe/London")
# Make START/STOP columns date/time
AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS")))
View(AC2)
mutate(START = parse_date_time(START)
# Make START/STOP columns date/time
AC2 %>%
mutate(START = parse_date_time(START))
# Make START/STOP columns date/time
AC2 %>%
mutate(START = parse_date_time(AC2$START, orders = c("ymd HMS")))
View(AC2)
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed alphabetic characters as they're all the same across all 660400 rows
# Move START and STOP to be columns per row to create a 'duration' variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columns with the timestamp value
# Make START/STOP columns date/time
AC2$START <- mutate(START = parse_date_time(AC2$START, orders = c("ymd HMS")))
View(AC2)
# Create a data set of application checkpoints for initial investigation grouped by hostname then eventName and arranged by timestamp
AC1 <- as_tibble(application.checkpoints) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in AC1
AC1$timestamp <- gsub("T", "", AC1$timestamp) %>%
str_replace("Z", "") # Removed alphabetic characters as they're all the same across all 660400 rows
# Move START and STOP to be columns per row to create a 'duration' variable showing times
AC2 <- AC1 %>%
pivot_wider(names_from = eventType, # These are what we would like to have as the column names in the wider-but-shorter dataframe
values_from = timestamp) # Fill those columns with the timestamp value
View(AC2)
# Make START/STOP columns date/time
AC2 <- AC2 %>%
mutate(START = parse_date_time(START, orders = c("ymd HMS")))
View(AC2)
AC2 <- AC2 %>%
mutate(STOP = parse_date_time(STOP, orders = c("ymd HMS")))
View(AC2)
# Create a duration column for AC2 to calculate runtime
AC2 %>%
mutate(duration = STOP - START)
View(AC2)
# Create a duration column for AC2 to calculate runtime
AC2 <- AC2 %>%
mutate(duration = STOP - START)
View(AC2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = GPU1$timestamp)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = n)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = START)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = 1)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = 60)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
# Plot duration against timestamp
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = duration)) + geom_line(aes(y = duration), colour = "#33a02c", size = 2)
View(AC1)
AC2 <- AC2 %>%
add_column(timestamp = GPU1$timestamp)
AC2 <- AC2 %>%
add_column(timestamp = AC1$timestamp)
View(AC2)
ggplot(aes(x = eventName, y = duration) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
# Plot duration of events
AC2 %>% slice(2000:2010) %>%
ggplot(aes(x = eventName, y = duration)) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
# Plot duration of events
AC2 %>% slice(2000:2100) %>%
ggplot(aes(x = eventName, y = n, fill = duration)) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
# Plot duration of events
AC2 %>% slice(2000:2100) %>%
ggplot(aes(x = eventName, y = duration, fill = hostname)) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
# Plot duration of events
AC2 %>% slice(2000:2100) %>%
ggplot(aes(x = duration, y = n, fill = eventName)) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
# Plot duration of events
AC2 %>% slice(2000:2100) %>%
ggplot(aes(x = duration, y = START, fill = eventName)) + geom_bar(stat="identity", position="dodge") + scale_fill_brewer(palette = "PuOr")
