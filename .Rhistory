setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
View(AC2)
# How many tassIds are there?
ID <- AC2 %>%
group_by(taskId) %>%
count() %>%
print()
# How many tassIds are there?
ID <- AC2 %>%
filter(eventName == "TotalRender") %>%
group_by(taskId) %>%
count() %>%
print()
# How many tassIds are there?
ID <- AC2 %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print()
# How many tassIds are there?
ID <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print() #
# How many tassIds are there?
ID <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print() %>%
count() %>%
print() # There are 1024 unique taskIds
# How many tassIds are there?
ID <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print()
View(ID)
# How many tassIds are there?
ID <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print()
# How many tassIds are there?
ID <- AC2 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
print()
cID <- ID %>%
count() %>%
print() # There are 1024 unique taskIds
# How many tasks does each host run?
T <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print()
View(`T`)
# How many tasks does each host run?
cT <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print()
View(cT)
View(application.checkpoints)
View(task.x.y)
# How many times does rendering happen per host?
Rh <- AC2 %>%
filter(eventName == "Render") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = TRUE) # Some hosts render more than others. Is this because of performance or tasking?
View(Rh)
# How many tassIds are there?
ID <- AC2 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
print()
# How many times does rendering happen?
R <- application.checkpoints %>%
filter(eventName == "TotalRender") %>%
count() %>%
print() # Rendering happens 132080 times
# How many times does rendering happen per host?
Rh <- AC2 %>%
filter(eventName == "Render") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = TRUE) # Some hosts render more than others. Is this because of performance or tasking?
View(Rh)
# How many times does rendering happen per host?
Rh <- AC2 %>%
filter(eventName == "TotalRender") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = TRUE) # Some hosts render more than others. Is this because of performance or tasking?
View(Rh)
Rh <- AC2 %>%
filter(eventName == "Render") %>%
count()
View(Rh)
# How many taskIds are there?
ID <- AC2 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print() # There are 65793 unique taskIds
# Count how many unique hosts there are
hosts <- AC1 %>%
group_by(hostname) %>%
summarise (n_distinct(hostname)) %>%
count() %>%
print() # There are 1024
# Are there more GPU serials then hosts?
ghosts <- GPU1 %>%
group_by(hostname) %>%
summarise (n_distinct(hostname)) %>%
count() %>%
print() # There seems to be one GPU per host as we know there are 1024 hosts
View(GPU1)
gserial <- GPU1 %>%
summarise(n_distinct(gpuSerial)) %>%
print()
gserial <- GPU1 %>%
summarise(n_distinct(gpuSerial)) %>%
count() %>%
print()
gserials <- GPU1 %>%
group_by(gpuSerial) %>%
summarise(n_distinct(gpuSerial)) %>%
count() %>%
print() # Each virtual machine has one GPU card
# How many times does TotalRender happen?
R <- application.checkpoints %>%
filter(eventName == "TotalRender") %>%
count() %>%
print() # Rendering happens 132080 times
View(task.x.y)
View(application.checkpoints)
# How many jobIds are there?
j <- AC2 %>%
group_by(jobId) %>%
summarise(n_distinct(jobId)) %>%
count() %>%
print()
# How many tasks does each host run?
cT <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print(., n = 5, width = Inf) # 8b6a0eebc87b4cb2b0539e81075191b900000D runs 71 tasks (most), dcc19f48bb3445a28338db3a8f002e9c00000S runs 58 (least). Thi appears to match the number of times TotalRender happens per host.
# How many tasks does each host run?
cT <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print(., n = 5, width = 2) # 8b6a0eebc87b4cb2b0539e81075191b900000D runs 71 tasks (most), dcc19f48bb3445a28338db3a8f002e9c00000S runs 58 (least). Thi appears to match the number of times TotalRender happens per host.
# How many tasks does each host run?
cT <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print(., n = 5, width = Inf) # 8b6a0eebc87b4cb2b0539e81075191b900000D runs 71 tasks (most), dcc19f48bb3445a28338db3a8f002e9c00000S runs 58 (least). Thi appears to match the number of times TotalRender happens per host.
av_T <- AC2 %>%
summarise(av = mean(n_distinct(taskId))) %>%
print()
av_T <- AC2 %>%
summarise(n_distinct(taskId)) %>%
mean() %>%
print()
av_T <- AC2 %>%
mutate(av = summarise(n_distinct(taskId))) %>%
mean(av) %>%
print()
av_T <- AC2 %>%
group_by(taskId) %>%
count()
View(av_T)
count()
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
count()
View(av_T)
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
mutate(av = .)
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId))
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId))
View(av_T)
as_tibble(av_T)
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
mean(n_distinct(taskId))
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
as.numeric(av_T, n_distinct)
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
as_tibble()
av_T %>%
as.numeric("n_distinct(taskId)")
av_T %>%
as.numeric(n_distinct(taskId))
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
as_tibble() %>%
mutate(av = n_distinct(taskId))
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
as_tibble() %>%
mutate(av = n_distinct)
av_T <- AC2 %>%
group_by(hostname) %>%
summarise(n_distinct(taskId)) %>%
as_tibble()
av_T %>%
as.numeric(n_distinct)
# Create a data set of tasks.x.y. for intial investigation
XY1 <- as_tibble(task.x.y) %>%
group_by(jobId)
View(XY1)
cTs <- XY1 %>%
summarise(n_distinct(taskId)) %>%
print()
# How many jobIds are there?
j <- AC2 %>%
group_by(jobId) %>%
summarise(n_distinct(jobId)) %>%
count() %>%
print()
jXY <- XY1 %>%
summarise(n_distinct(jobId)) %>%
count() %>%
print()
# How many tasks does each jobId have?
cTs <- XY1 %>%
summarise(n_distinct(taskId)) %>%
print()
cTj <- AC2 %>%
summarise(n_distinct(taskId)) %>%
print()
summarise(n_distinct(taskId)) %>%
print()
cTj <- AC2 %>%
group_by(jobId) %>%
summarise(n_distinct(taskId)) %>%
print()
# How many tasks in XY1?
cT1 <- XY1 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
print()
# How many tasks in XY1?
cT1 <- XY1 %>%
group_by(taskId) %>%
summarise(n_distinct(taskId)) %>%
count() %>%
print()
View(GPU1)
# Are the task IDs the same across AC2 and XY1
all(AC2$taskId %in% XY1$taskId)
# How many gpuUUIDs are there? Is this the same as number of taskIds?
UU <- GPU1 %>%
group_by(gpuUUID) %>%
summarise(n_distinct(gpuUUID)) %>%
count() %>%
print()
UU1 <- GPU1 %>%
summarise(n_distinct(gpuUUID)) %>%
count() %>%
print()
summarise(n_distinct(gpuUUID)) %>%
count() %>%
print()
UU1 <- GPU1 %>%
group_by(gpuSerial) %>%
summarise(n_distinct(gpuUUID)) %>%
count() %>%
print()
UU1 <- GPU1 %>%
group_by(hostname) %>%
summarise(n_distinct(gpuUUID)) %>%
count() %>%
print()
UU1 <- GPU1 %>%
group_by(hostname) %>%
summarise(n_distinct(gpuUUID))
View(UU1)
# How many times does rendering happen per host?
TRh <- AC1 %>%
filter(eventName == "TotalRender") %>%
count() %>%
as_tibble() %>%
arrange(desc(n), .by_group = TRUE) # Some hosts render more than others. Is this because of performance or tasking?
View(TRh)
Rh <- AC1 %>%
filter(eventName == "Render") %>%
count() # This appears to be the same as TotalRender
View(Rh)
Rh <- AC1 %>%
filter(eventName == "Render") %>%
count() # This appears to be the same as TotalRender
View(R)
# Are the task IDs the same across AC1 and XY1?
all(AC1$taskId %in% XY1$taskId) #Yes
View(AC2)
# How many eventNames are there?
eT <- AC1 %>%
summarise(n_distinct(eventName)) %>%
count() %>%
print()
# How many eventNames are there?
eT <- AC1 %>%
group_by(eventName) %>%
summarise(n_distinct(eventName)) %>%
count() %>%
print()
View(AC2)
# Which hosts have the longest TotalRender time?
AC7 <- AC2 %>%
filter(eventName == "TotalRender") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
TR <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100) # New column with coefficient of variation
print(AC2, n = 6, width = Inf)
# Plot duration of eventName activities
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot() # Total Render has longest execution time because it accounts for the whole rendering process.
# Remove Render from results
AC4 <- AC3 %>%
filter(eventName != "Render")
# Plot duration of eventName activities without render to see other execution times better
ggplot(AC4, aes(x = eventName, y = duration)) + geom_boxplot() # Uploading has a significantly larger execution time than tiling and saving config.
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# LABEL AND SAVE # Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot() # Render dominates run time with the longest execution times
View(TR)
View(AC7)
# What the mean, standard deviation and coefficient of variation is for GPU power draw?
Power <- GPU1 %>%
group_by(hostname) %>%
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV_p = (sd_power/av_power)*100) # New column with coefficient of variation
# Create single data set to compare execution time and power draw.
Power_Duration <- left_join(TR, Power, by = "hostname")
View(Power_Duration)
# Quickplot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
# Boxplot execution time by power draw
ggplot(Power_Duration, aes(x = av_power, y = av_duration)) + geom_boxplot()
# Create a single data set with power usage and duration for all events except total render
BEGIN <- as_datetime("2018-11-0807:41:27.242", tz = "Europe/London")
END <- as_datetime("2018-11-0807:42:27.242", tz = "Europe/London")
AC8 <- AC2 %>%
filter(START >= BEGIN, START <= END) %>% # Select start times between BEGIN and END
filter (eventName != "TotalRender") %>% # Filter out TotalRender
mutate(timestamp = round_date(START, unit = "2 seconds")) # Create new timestamp column where start time is rounded to the nearest 15 seconds
GPU2 <- GPU1 %>%
filter(timestamp >= BEGIN, timestamp <= END) %>% # Select timestamp that is between BEGIN and END
mutate(timestamp = round_date(timestamp, unit = "2 seconds")) # Alter the timestamp column so that it is rounded to the nearest 15 seconds
Power_Duration1 <- full_join(AC8, GPU2, by = c("timestamp", "hostname")) %>% # Join AC8 and GPU2
na.omit() %>% # Omit rows with NA
group_by(hostname) %>% # Group by hostname
arrange(timestamp, .by_group = TRUE) # Arrange by timestamp
View(Power_Duration1)
View(Power_Duration)
# Quickplot timestamp by power draw for host that consumes the highest av_power
Power_Duration1 %>%
filter(hostname == "a77ef58b13ad4c01b769dac8409af3f800000D") %>%
ggplot(aes(x = timestamp)) + geom_line(aes(y = powerDrawWatt), colour = "#1f78b4", size = 1)
# Quickplot execution time by power draw
Power_Duration1 %>%
ggplot(aes(x = powerDrawWatt)) + geom_line(aes(y = duration), colour = "#1f78b4", size = 1)
# Quickplot power draw by execution time
Power_Duration1 %>%
ggplot(aes(x = duration)) + geom_line(aes(y = powerDrawWatt), colour = "#1f78b4", size = 1)
# Quickplot power draw by duration as boxplot
ggplot(Power_Duration1, aes(x = powerDrawWatt, y = duration)) + geom_boxplot()
ggplot(Power_Duration1, aes(x = duration)) + geom_histogram()
