setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
load.project("cashflow_analysis")
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test"
setwd("D:/Morgan/Documents/NCL MSc/EDA/Test")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Convert timestamp values to date/time
as_datetime(AC1%timestamp)
# Convert timestamp values to date/time
as_datetime(AC1$timestamp)
setwd("D:/Morgan/Documents/NCL MSc/CC/CSC8634_TeraScope_210431461")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Plot duration of eventName activities
ggplot(AC2, aes(x = eventName, y = duration)) + geom_boxplot() # Total Render has longest execution time because it accounts for the whole rendering process.
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# Remove Render from results
AC4 <- AC3 %>%
filter(eventName != "Render")
# Plot duration of eventName activities without render to see other execution times better
ggplot(AC4, aes(x = eventName, y = duration)) + geom_boxplot() # Uploading has a significantly larger execution time than tiling and saving config.
# Remove Total Render from results
AC3 <- AC2 %>%
filter(eventName != "TotalRender")
# LABEL AND SAVE # Plot duration of eventName activities without total render
ggplot(AC3, aes(x = eventName, y = duration)) + geom_boxplot() # Render dominates run time with the longest execution times
# Which hosts have the longest TotalRender time?
AC7 <- AC2 %>%
filter(eventName == "TotalRender") %>%
arrange(desc(duration)) # Arrange so longest duration is at the top
RT_mean <- AC7 %>%
group_by(hostname) %>%
summarise(newvariable = mean(duration))
View(RT_mean)
RT_mean <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration))
RT_mean <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd = sd(duration)) # Calculate mean of duration for each host.
View(RT_mean)
RT <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd = sd(duration), cv = cov((sd/av_duration)*100)) # Calculate mean of duration for each host.
RT <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd = sd(duration), cv = cov(sd, av_duration)) # Calculate mean of duration for each host.
View(RT)
RT <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd = sd(duration), cov(duration)) # Calculate mean and standard deviation of duration for each host.
RT <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100)
View(RT)
View(AC7)
# Create GPU2 sop timestamp isn't as datetime like AC1
GPU2 <-  as_tibble(gpu) %>%
group_by(hostname) %>%
arrange(timestamp, .by_group = TRUE)
# Remove the non-numeric characters from the timestamp column in GPU
GPU2$timestamp <- gsub("T", "", GPU2$timestamp) %>%
str_replace("Z", "") # Removed alphabetic characters as they're all the same across all 660400 rows
# Create joined dataset of AC2 and GPU2
AC_GPU <- left_join(AC2, GPU2, by = "hostname")
TR <- AC7 %>%
group_by(hostname) %>%
summarise(av_duration = mean(duration), sd_duration = sd(duration)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV = (sd_duration/av_duration)*100) # New column with coefficient of variation
View(GPU1)
View(GPU2)
View(GPU1)
# What the mean, standard deviation and coefficient of variation is for GPU power draw?
Power <- GPU1 %>%
group_by(hostname) %>%
summarise(av_power = mean(powerDrawWatt), sd_power = sd(powerDrawWatt)) %>% # Calculate mean and standard deviation of duration for each host.
mutate(CoV_p = (sd_power/av_power)*100) # New column with coefficient of variation
View(Power)
Power_Duration <- left_join(TR, Power, by = "hostname")
View(Power_Duration)
# Quickplot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = AV_duration), colour = "#33a02c", size = 1)
# Quickplot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#33a02c", size = 1)
# Quickplot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#b2df8a", size = 1)
# Quickplot execution time by power draw
Power_Duration %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
# Quickplot execution time by power draw with the 100 longest average durations
Power_Duration %>%
arrange(desc(av_duration)) %>%
head(100) %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
Power_Duration %>%
arrange(desc(av_power)) %>%
head(100) %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
# Boxplot
ggplot(Power_Duration, aes(x = av_power, y = av_duration)) + geom_boxplot()
View(AC2)
# Quickplot execution time by power draw for the 100 highest average gpu power draws
Power_Duration %>%
arrange(desc(av_power)) %>%
head(100) %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
# Quickplot execution time by power draw with the 100 lowest average durations
Power_Duration %>%
arrange(desc(av_duration)) %>%
tail(100) %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
#Quickplot execution time by power draw for the 100 lowest average gpu power draws
Power_Duration %>%
arrange(desc(av_power)) %>%
tail(100) %>%
ggplot(aes(x = av_power)) + geom_line(aes(y = av_duration), colour = "#1f78b4", size = 1)
